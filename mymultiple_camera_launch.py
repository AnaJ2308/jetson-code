# Copyright 2023 Intel Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# DESCRIPTION #
# ----------- #
# Use this launch file to launch 2 devices.
# The Parameters available for definition in the command line for each camera are described in rs_launch.configurable_parameters
# For each device, the parameter name was changed to include an index.
# For example: to set camera_name for device1 set parameter camera_name1.
# command line example:
# ros2 launch realsense2_camera rs_multi_camera_launch.py camera_name1:=D400 device_type2:=l5. device_type1:=d4..
# My note: this launch only works with exactly 3 cameras and uses myrs_launch so pointcloud works.

"""Launch realsense2_camera node."""
import copy
from launch import LaunchDescription, LaunchContext
import launch_ros.actions
from launch.actions import IncludeLaunchDescription, OpaqueFunction, LogInfo
from launch.substitutions import LaunchConfiguration, ThisLaunchFileDir
from launch.launch_description_sources import PythonLaunchDescriptionSource
import sys
import os
import yaml
import pathlib
sys.path.append(str(pathlib.Path(__file__).parent.absolute()))
import myrs_launch

local_parameters = [{'name': 'camera_name1', 'default': 'camera1', 'description': 'camera1 unique name'},
                    {'name': 'camera_name2', 'default': 'camera2', 'description': 'camera2 unique name'},
                    {'name': 'camera_name3', 'default': 'camera3', 'description': 'camera3 unique name'},
                    {'name': 'camera_namespace1', 'default': 'camera1', 'description': 'camera1 namespace'},
                    {'name': 'camera_namespace2', 'default': 'camera2', 'description': 'camera2 namespace'},
                    {'name': 'camera_namespace3', 'default': 'camera3', 'description': 'camera3 namespace'},
                    ]

def yaml_to_dict(path_to_yaml):
    with open(path_to_yaml, "r") as f:
        return yaml.load(f, Loader=yaml.SafeLoader)
    
def set_configurable_parameters(local_params):
    return dict([(param['original_name'], LaunchConfiguration(param['name'])) for param in local_params])

def duplicate_params(general_params, posix):
    local_params = copy.deepcopy(general_params)
    for param in local_params:
        param['original_name'] = param['name']
        param['name'] += posix
    return local_params

def launch_static_transform_publisher_node(context : LaunchContext):
    # Load lifecycle nodes setting from YAML dynamically generated by CMAKE instead of environment variable
    lifecycle_param_file = os.path.join(
        os.path.dirname(__file__), '..', 'config', 'global_settings.yaml'
    )
    try:
        lifecycle_params = yaml_to_dict(lifecycle_param_file)
        use_lifecycle_node = lifecycle_params.get("use_lifecycle_node", False)

    except Exception:
        use_lifecycle_node = False

    node_action = launch_ros.actions.LifecycleNode if use_lifecycle_node else launch_ros.actions.Node
    log_message = "Launching as LifecycleNode" if use_lifecycle_node else "Launching as Normal ROS Node"
    
    root = "base_link"
    cam1 = context.launch_configurations['camera_name1'] + "_link"
    cam2 = context.launch_configurations['camera_name2'] + "_link"
    cam3 = context.launch_configurations['camera_name3'] + "_link"
    # dummy static transformation from camera1 to camera2
   # x y z roll pitch yaw   parent     child
    tf_cam1 = node_action(
        namespace="", name="tf_cam1", package="tf2_ros", executable="static_transform_publisher",
        # x y z roll pitch yaw   parent     child
        arguments=["0.0988",  "0",  "0.028",  "0", "0.7853", "0",  root,      cam1]
    )
    tf_cam2 = node_action(
        namespace="", name="tf_cam2", package="tf2_ros", executable="static_transform_publisher",
        arguments=["0", "-0.0988",  "0.028",  "-1.570796", "0.7853", "0",  root,      cam2]
    )
    tf_cam3 = node_action(
        namespace="", name="tf_cam3", package="tf2_ros", executable="static_transform_publisher",
        arguments=["0", "0.0988",  "0.028",  "1.570796", "0.7853", "0",  root,      cam3]
    )
    return [LogInfo(msg=f"ðŸš€ {log_message}"), tf_cam1, tf_cam2, tf_cam3]

def generate_launch_description():
    params1 = duplicate_params(myrs_launch.configurable_parameters, '1')
    params2 = duplicate_params(myrs_launch.configurable_parameters, '2')
    params3 = duplicate_params(myrs_launch.configurable_parameters, '3')
    return LaunchDescription(
        myrs_launch.declare_configurable_parameters(local_parameters) +
        myrs_launch.declare_configurable_parameters(params1) +
        myrs_launch.declare_configurable_parameters(params2) +
        myrs_launch.declare_configurable_parameters(params3) +
        [
        OpaqueFunction(function=myrs_launch.launch_setup,
                       kwargs = {'params'           : set_configurable_parameters(params1),
                                 'param_name_suffix': '1'}),
        OpaqueFunction(function=myrs_launch.launch_setup,
                       kwargs = {'params'           : set_configurable_parameters(params2),
                                 'param_name_suffix': '2'}),
        OpaqueFunction(function=myrs_launch.launch_setup,
                       kwargs = {'params'           : set_configurable_parameters(params3),
                                 'param_name_suffix': '3'}),
        OpaqueFunction(function=launch_static_transform_publisher_node)
    ])